(undo-tree-save-format-version . 1)
"a512d6bbe5e03078f242c7edfa45a60cbe16d278"
[nil nil nil nil (26138 22055 641194 699000) 0 nil]
([nil nil ((#("\"" 0 1 (fontified t face font-lock-string-face)) . -1903) (undo-tree-id422 . -1) (#("a" 0 1 (fontified t face font-lock-string-face)) . -1904) (undo-tree-id423 . -1) (#("b" 0 1 (fontified t face font-lock-string-face)) . -1905) (undo-tree-id424 . -1) (#("o" 0 1 (fontified t face font-lock-string-face)) . -1906) (undo-tree-id425 . -1) (#("u" 0 1 (fontified t face font-lock-string-face)) . -1907) (undo-tree-id426 . -1) (#("t" 0 1 (fontified t face font-lock-string-face)) . -1908) (undo-tree-id427 . -1) (#("_" 0 1 (fontified t face font-lock-string-face)) . -1909) (undo-tree-id428 . -1) (#("_" 0 1 (fontified t face font-lock-string-face)) . -1910) (undo-tree-id429 . -1) (#("d" 0 1 (fontified t face font-lock-string-face)) . -1911) (undo-tree-id430 . -1) (#("e" 0 1 (fontified t face font-lock-string-face)) . -1912) (undo-tree-id431 . -1) (#("s" 0 1 (fontified t face font-lock-string-face)) . -1913) (undo-tree-id432 . -1) (#("c" 0 1 (fontified t face font-lock-string-face)) . -1914) (undo-tree-id433 . -1) (#("\"" 0 1 (fontified t face font-lock-string-face)) . -1915) (undo-tree-id434 . -1) (#(">" 0 1 (fontified t)) . -1916) (undo-tree-id435 . -1) (#("
" 0 1 (fontified t)) . -1917) (undo-tree-id436 . -1) (undo-tree-id437 . -1) 1918 (#("  " 0 2 (fontified t)) . -1918) (undo-tree-id438 . -2) 1920 (#("  " 0 2 (fontified t)) . -1920) (undo-tree-id439 . -2) 1922 (#("  " 0 2 (fontified t)) . -1922) (undo-tree-id440 . -2) 1924 (#("  " 0 2 (fontified t)) . -1924) (undo-tree-id441 . -2) 1926 (#("  " 0 2 (fontified t)) . -1926) (undo-tree-id442 . -2) 1928) nil (26138 22055 641192 381000) 0 nil])
([nil nil ((1904 . 1928) (nil ws-butler-chg delete 1904 . 1905) (1903 . 1904)) nil (26138 22055 641183 181000) 0 nil])
([nil nil ((1880 . 1882) (1927 . 1930)) nil (26138 22055 641182 523000) 0 nil])
([nil nil ((2011 . 2021) (#("h" 0 1 (fontified t face font-lock-string-face)) . -2011) (undo-tree-id383 . -1) (undo-tree-id384 . -1) (#("t" 0 1 (fontified t face font-lock-string-face)) . -2012) (undo-tree-id385 . -1) (undo-tree-id386 . -1) (#("t" 0 1 (fontified t face font-lock-string-face)) . -2013) (undo-tree-id387 . -1) (undo-tree-id388 . -1) (#("p" 0 1 (fontified t face font-lock-string-face)) . -2014) (undo-tree-id389 . -1) (undo-tree-id390 . -1) (#("s" 0 1 (fontified t face font-lock-string-face)) . -2015) (undo-tree-id391 . -1) (undo-tree-id392 . -1) (#(":" 0 1 (fontified t face font-lock-string-face)) . -2016) (undo-tree-id393 . -1) (undo-tree-id394 . -1) (#("/" 0 1 (fontified t face font-lock-string-face)) . -2017) (undo-tree-id395 . -1) (undo-tree-id396 . -1) (#("/" 0 1 (fontified t face font-lock-string-face)) . -2018) (undo-tree-id397 . -1) (undo-tree-id398 . -1) (#("e" 0 1 (fontified t face font-lock-string-face)) . -2019) (undo-tree-id399 . -1) (undo-tree-id400 . -1) (#("x" 0 1 (fontified t face font-lock-string-face)) . -2020) (undo-tree-id401 . -1) (undo-tree-id402 . -1) (#("a" 0 1 (fontified t face font-lock-string-face)) . -2021) (undo-tree-id403 . -1) (undo-tree-id404 . -1) (#("m" 0 1 (fontified t face font-lock-string-face)) . -2022) (undo-tree-id405 . -1) (undo-tree-id406 . -1) (#("p" 0 1 (fontified t face font-lock-string-face)) . -2023) (undo-tree-id407 . -1) (undo-tree-id408 . -1) (#("l" 0 1 (fontified t face font-lock-string-face)) . -2024) (undo-tree-id409 . -1) (undo-tree-id410 . -1) (#("e" 0 1 (fontified t face font-lock-string-face)) . -2025) (undo-tree-id411 . -1) (undo-tree-id412 . -1) (#("." 0 1 (fontified t face font-lock-string-face)) . -2026) (undo-tree-id413 . -1) (undo-tree-id414 . -1) (#("c" 0 1 (fontified t face font-lock-string-face)) . -2027) (undo-tree-id415 . -1) (undo-tree-id416 . -1) (undo-tree-id417 . 1) (#("o" 0 1 (fontified t face font-lock-string-face)) . -2028) (undo-tree-id418 . -1) (undo-tree-id419 . -1) (#("m" 0 1 (fontified t face font-lock-string-face)) . -2029) (undo-tree-id420 . -1) (undo-tree-id421 . -1) 2030) nil (26138 22055 641180 200000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . 1932)) nil (26138 22055 641166 708000) 0 nil])
([nil nil ((2146 . 2155) (#("r" 0 1 (fontified t face font-lock-string-face)) . -2146) (undo-tree-id359 . -1) (undo-tree-id360 . -1) (#("a" 0 1 (fontified t face font-lock-string-face)) . -2147) (undo-tree-id361 . -1) (undo-tree-id362 . -1) (#("j" 0 1 (fontified t face font-lock-string-face)) . -2148) (undo-tree-id363 . -1) (undo-tree-id364 . -1) (#("s" 0 1 (fontified t face font-lock-string-face)) . -2149) (undo-tree-id365 . -1) (undo-tree-id366 . -1) (#("h" 0 1 (fontified t face font-lock-string-face)) . -2150) (undo-tree-id367 . -1) (undo-tree-id368 . -1) (#("e" 0 1 (fontified t face font-lock-string-face)) . -2151) (undo-tree-id369 . -1) (undo-tree-id370 . -1) (#("k" 0 1 (fontified t face font-lock-string-face)) . -2152) (undo-tree-id371 . -1) (undo-tree-id372 . -1) (#("h" 0 1 (fontified t face font-lock-string-face)) . -2153) (undo-tree-id373 . -1) (undo-tree-id374 . -1) (#("a" 0 1 (fontified t face font-lock-string-face)) . -2154) (undo-tree-id375 . -1) (undo-tree-id376 . -1) (#("r" 0 1 (fontified t face font-lock-string-face)) . -2155) (undo-tree-id377 . -1) (undo-tree-id378 . -1) (#("2" 0 1 (fontified t face font-lock-string-face)) . -2156) (undo-tree-id379 . -1) (undo-tree-id380 . -1) 2157 (#("6" 0 1 (fontified t face font-lock-string-face)) . -2157) (undo-tree-id381 . -1) (undo-tree-id382 . -1) 2158 (t 26138 21524 80379 823000)) nil (26138 22055 641165 244000) 0 nil])
([nil nil ((2146 . 2147) (#("A" 0 1 (fontified t ws-butler-chg chg face font-lock-string-face)) . -2146) (undo-tree-id357 . -1) (#("a" 0 1 (fontified t ws-butler-chg chg face font-lock-string-face)) . -2147) (undo-tree-id358 . -1) 2148 (2147 . 2148)) nil (26138 22055 641155 981000) 0 nil])
([nil nil ((#("
          <a
            href=\"https://linkedin.com/in/rajshekhar26\"
            aria-label=\"linkedin\"
            class=\"link link--icon\"
          >
            <i aria-hidden=\"true\" class=\"fab fa-linkedin\"></i>
          </a>" 0 12 (fontified t) 12 13 (fontified t face font-lock-function-name-face) 13 26 (fontified t) 26 30 (fontified t face font-lock-variable-name-face) 30 31 (fontified t) 31 62 (fontified t face font-lock-string-face) 62 69 (fontified t face font-lock-string-face) 69 70 (fontified t) 70 82 (fontified t) 82 92 (fontified t face font-lock-variable-name-face) 92 93 (fontified t) 93 94 (fontified t face font-lock-string-face) 94 97 (fontified t face font-lock-string-face) 97 103 (fontified t face font-lock-string-face) 103 104 (fontified t) 104 105 (fontified t) 105 108 (fontified t) 108 116 (fontified t) 116 121 (fontified t face font-lock-variable-name-face) 121 122 (fontified t) 122 139 (fontified t face font-lock-string-face) 139 140 (fontified t) 140 165 (fontified t) 165 166 (fontified t face font-lock-function-name-face) 166 167 (fontified t) 167 178 (fontified t face font-lock-variable-name-face) 178 179 (fontified t) 179 185 (fontified t face font-lock-string-face) 185 186 (fontified t) 186 191 (fontified t face font-lock-variable-name-face) 191 192 (fontified t) 192 204 (fontified t face font-lock-string-face) 204 207 (fontified t face font-lock-string-face) 207 209 (fontified t face font-lock-string-face) 209 212 (fontified t) 212 213 (fontified t face font-lock-function-name-face) 213 215 (fontified t) 215 227 (fontified t) 227 228 (fontified t face font-lock-function-name-face) 228 229 (fontified t)) . 2313) (undo-tree-id353 . -228) (undo-tree-id354 . -228) (undo-tree-id355 . -228) (undo-tree-id356 . -228)) nil (26138 22055 641154 400000) 0 nil])
([nil nil ((6421 . 6429) (#("J" 0 1 (fontified t)) . -6421) (undo-tree-id314 . -1) (#("e" 0 1 (fontified t)) . -6422) (undo-tree-id315 . -1) (#("s" 0 1 (fontified t)) . -6423) (undo-tree-id316 . -1) (#("t" 0 1 (fontified t)) . -6424) (undo-tree-id317 . -1) 6425 (6349 . 6360) (#("M" 0 1 (fontified t)) . -6349) (undo-tree-id318 . -1) (#("a" 0 1 (fontified t)) . -6350) (undo-tree-id319 . -1) (#("t" 0 1 (fontified t)) . -6351) (undo-tree-id320 . -1) (#("e" 0 1 (fontified t)) . -6352) (undo-tree-id321 . -1) (#("r" 0 1 (fontified t)) . -6353) (undo-tree-id322 . -1) (#("i" 0 1 (fontified t)) . -6354) (undo-tree-id323 . -1) (#("a" 0 1 (fontified t)) . -6355) (undo-tree-id324 . -1) (#("l" 0 1 (fontified t)) . -6356) (undo-tree-id325 . -1) (#(" " 0 1 (fontified t)) . -6357) (undo-tree-id326 . -1) (#("U" 0 1 (fontified t)) . -6358) (undo-tree-id327 . -1) (#("I" 0 1 (fontified t)) . -6359) (undo-tree-id328 . -1) 6360 (6221 . 6224) (#("R" 0 1 (fontified t)) . -6221) (undo-tree-id329 . -1) (#("e" 0 1 (fontified t)) . -6222) (undo-tree-id330 . -1) (#("d" 0 1 (fontified t)) . -6223) (undo-tree-id331 . -1) (#("u" 0 1 (fontified t)) . -6224) (undo-tree-id332 . -1) (#("x" 0 1 (fontified t)) . -6225) (undo-tree-id333 . -1) 6226 (#("S" 0 1 (fontified t)) . -6023) (undo-tree-id334 . -1) (#("c" 0 1 (fontified t)) . -6024) (undo-tree-id335 . -1) (#("r" 0 1 (fontified t)) . -6025) (undo-tree-id336 . -1) (#("i" 0 1 (fontified t)) . -6026) (undo-tree-id337 . -1) (#("p" 0 1 (fontified t)) . -6027) (undo-tree-id338 . -1) (#("t" 0 1 (fontified t)) . -6028) (undo-tree-id339 . -1) 6029 (5955 . 5958) (#("S" 0 1 (fontified t)) . -5955) (undo-tree-id340 . -1) (#("C" 0 1 (fontified t)) . -5956) (undo-tree-id341 . -1) (#("S" 0 1 (fontified t)) . -5957) (undo-tree-id342 . -1) (#("S" 0 1 (fontified t)) . -5958) (undo-tree-id343 . -1) 5959 (#("S" 0 1 (fontified t)) . -5894) (undo-tree-id344 . -1) (#("S" 0 1 (fontified t)) . -5895) (undo-tree-id345 . -1) 5896 (5828 . 5832) (#("H" 0 1 (fontified t)) . -5828) (undo-tree-id346 . -1) (undo-tree-id347 . -1) (#("T" 0 1 (fontified t)) . -5829) (undo-tree-id348 . -1) (undo-tree-id349 . -1) (#("M" 0 1 (fontified t)) . -5830) (undo-tree-id350 . -1) (undo-tree-id351 . -1) (#("L" 0 1 (fontified t)) . -5831) (undo-tree-id352 . -1) 5832) nil (26138 22055 641149 839000) 0 nil])
([nil nil ((#("/" 0 1 (fontified t)) . 6497)) nil (26138 22055 641126 446000) 0 nil])
([nil nil ((#("          <li class=\"skills__list-item btn btn--plain\">Enzyme<li>
" 0 11 (fontified t) 11 13 (fontified t face font-lock-function-name-face) 13 14 (fontified t) 14 19 (fontified t face font-lock-variable-name-face) 19 20 (fontified t) 20 25 (fontified t face font-lock-string-face) 25 54 (fontified t face font-lock-string-face) 54 62 (fontified t) 62 63 (fontified t ws-butler-chg delete face font-lock-function-name-face) 63 64 (fontified t face font-lock-function-name-face) 64 66 (fontified t)) . 6435) (undo-tree-id310 . 4) (undo-tree-id311 . -65) (undo-tree-id312 . -66) (undo-tree-id313 . -62) 6497) nil (26138 22055 641125 921000) 0 nil])
([nil nil ((#("          <li class=\"skills__list-item btn btn--plain\">CI/CD</li>
" 0 1 (fontified t ws-butler-chg delete) 1 11 (fontified t) 11 13 (fontified t face font-lock-function-name-face) 13 14 (fontified t) 14 19 (fontified t face font-lock-variable-name-face) 19 20 (fontified t) 20 29 (fontified t face font-lock-string-face) 29 54 (fontified t face font-lock-string-face) 54 62 (fontified t) 62 64 (fontified t face font-lock-function-name-face) 64 66 (fontified t)) . 6435) (undo-tree-id306 . 66) (undo-tree-id307 . -65) (undo-tree-id308 . -66) (undo-tree-id309 . -62) 6497) nil (26138 22055 641124 129000) 0 nil])
([nil nil ((#("r" 0 1 (fontified t face font-lock-string-face)) . -6622) (undo-tree-id278 . -1) (#("j" 0 1 (fontified t face font-lock-string-face)) . -6623) (undo-tree-id279 . -1) (#("s" 0 1 (fontified t face font-lock-string-face)) . -6624) (undo-tree-id280 . -1) (#("h" 0 1 (fontified t face font-lock-string-face)) . -6625) (undo-tree-id281 . -1) (#("e" 0 1 (fontified t face font-lock-string-face)) . -6626) (undo-tree-id282 . -1) (#("k" 0 1 (fontified t face font-lock-string-face)) . -6627) (undo-tree-id283 . -1) (#("h" 0 1 (fontified t face font-lock-string-face)) . -6628) (undo-tree-id284 . -1) 6629 (#("a" 0 1 (fontified t face font-lock-string-face)) . -6629) (undo-tree-id285 . -1) (#("r" 0 1 (fontified t face font-lock-string-face)) . -6630) (undo-tree-id286 . -1) (#("." 0 1 (fontified t face font-lock-string-face)) . -6631) (undo-tree-id287 . -1) (#("o" 0 1 (fontified t face font-lock-string-face)) . -6632) (undo-tree-id288 . -1) (#("f" 0 1 (fontified t face font-lock-string-face)) . -6633) (undo-tree-id289 . -1) (#("f" 0 1 (fontified t face font-lock-string-face)) . -6634) (undo-tree-id290 . -1) (#("i" 0 1 (fontified t face font-lock-string-face)) . -6635) (undo-tree-id291 . -1) (#("c" 0 1 (fontified t face font-lock-string-face)) . -6636) (undo-tree-id292 . -1) (#("i" 0 1 (fontified t face font-lock-string-face)) . -6637) (undo-tree-id293 . -1) (#("a" 0 1 (fontified t face font-lock-string-face)) . -6638) (undo-tree-id294 . -1) (#("l" 0 1 (fontified t face font-lock-string-face)) . -6639) (undo-tree-id295 . -1) (#("@" 0 1 (fontified t face font-lock-string-face)) . -6640) (undo-tree-id296 . -1) (#("g" 0 1 (fontified t face font-lock-string-face)) . -6641) (undo-tree-id297 . -1) (#("m" 0 1 (fontified t face font-lock-string-face)) . -6642) (undo-tree-id298 . -1) (#("a" 0 1 (fontified t face font-lock-string-face)) . -6643) (undo-tree-id299 . -1) (#("i" 0 1 (fontified t face font-lock-string-face)) . -6644) (undo-tree-id300 . -1) (#("l" 0 1 (fontified t face font-lock-string-face)) . -6645) (undo-tree-id301 . -1) (#("." 0 1 (fontified t face font-lock-string-face)) . -6646) (undo-tree-id302 . -1) (#("c" 0 1 (fontified t face font-lock-string-face)) . -6647) (undo-tree-id303 . -1) (#("o" 0 1 (fontified t face font-lock-string-face)) . -6648) (undo-tree-id304 . -1) (#("m" 0 1 (fontified t face font-lock-string-face)) . -6649) (undo-tree-id305 . -1) 6650) nil (26138 22055 641119 800000) 0 nil])
([nil nil ((6623 . 6650) (nil ws-butler-chg delete 6623 . 6624) (6622 . 6623)) nil (26138 22055 641108 761000) 0 nil])
([nil nil ((6622 . 6639) (#("r" 0 1 (fontified t face font-lock-string-face)) . -6622) (undo-tree-id250 . -1) (#("j" 0 1 (fontified t face font-lock-string-face)) . -6623) (undo-tree-id251 . -1) (#("s" 0 1 (fontified t face font-lock-string-face)) . -6624) (undo-tree-id252 . -1) (#("h" 0 1 (fontified t face font-lock-string-face)) . -6625) (undo-tree-id253 . -1) (#("e" 0 1 (fontified t face font-lock-string-face)) . -6626) (undo-tree-id254 . -1) (#("k" 0 1 (fontified t face font-lock-string-face)) . -6627) (undo-tree-id255 . -1) (#("h" 0 1 (fontified t face font-lock-string-face)) . -6628) (undo-tree-id256 . -1) 6629 (#("a" 0 1 (fontified t face font-lock-string-face)) . -6629) (undo-tree-id257 . -1) (#("r" 0 1 (fontified t face font-lock-string-face)) . -6630) (undo-tree-id258 . -1) (#("." 0 1 (fontified t face font-lock-string-face)) . -6631) (undo-tree-id259 . -1) (#("o" 0 1 (fontified t face font-lock-string-face)) . -6632) (undo-tree-id260 . -1) (#("f" 0 1 (fontified t face font-lock-string-face)) . -6633) (undo-tree-id261 . -1) (#("f" 0 1 (fontified t face font-lock-string-face)) . -6634) (undo-tree-id262 . -1) (#("i" 0 1 (fontified t face font-lock-string-face)) . -6635) (undo-tree-id263 . -1) (#("c" 0 1 (fontified t face font-lock-string-face)) . -6636) (undo-tree-id264 . -1) (#("i" 0 1 (fontified t face font-lock-string-face)) . -6637) (undo-tree-id265 . -1) (#("a" 0 1 (fontified t face font-lock-string-face)) . -6638) (undo-tree-id266 . -1) (#("l" 0 1 (fontified t face font-lock-string-face)) . -6639) (undo-tree-id267 . -1) (#("@" 0 1 (fontified t face font-lock-string-face)) . -6640) (undo-tree-id268 . -1) (#("g" 0 1 (fontified t face font-lock-string-face)) . -6641) (undo-tree-id269 . -1) (#("m" 0 1 (fontified t face font-lock-string-face)) . -6642) (undo-tree-id270 . -1) (#("a" 0 1 (fontified t face font-lock-string-face)) . -6643) (undo-tree-id271 . -1) (#("i" 0 1 (fontified t face font-lock-string-face)) . -6644) (undo-tree-id272 . -1) (#("l" 0 1 (fontified t face font-lock-string-face)) . -6645) (undo-tree-id273 . -1) (#("." 0 1 (fontified t face font-lock-string-face)) . -6646) (undo-tree-id274 . -1) (#("c" 0 1 (fontified t face font-lock-string-face)) . -6647) (undo-tree-id275 . -1) (#("o" 0 1 (fontified t face font-lock-string-face)) . -6648) (undo-tree-id276 . -1) (#("m" 0 1 (fontified t face font-lock-string-face)) . -6649) (undo-tree-id277 . -1) 6650) nil (26138 22055 641106 120000) 0 nil])
([nil nil ((#("r" 0 1 (fontified t)) . -6896) (undo-tree-id229 . -1) (#("e" 0 1 (fontified t)) . -6897) (undo-tree-id230 . -1) (#("a" 0 1 (fontified t)) . -6898) (undo-tree-id231 . -1) (#("t" 0 1 (fontified t)) . -6899) (undo-tree-id232 . -1) (#("e" 0 1 (fontified t)) . -6900) (undo-tree-id233 . -1) (#("d" 0 1 (fontified t)) . -6901) (undo-tree-id234 . -1) (#(" " 0 1 (fontified t)) . -6902) (undo-tree-id235 . -1) (#("B" 0 1 (fontified t)) . -6903) (undo-tree-id236 . -1) (#("y" 0 1 (fontified t)) . -6904) (undo-tree-id237 . -1) (#(" " 0 1 (fontified t)) . -6905) (undo-tree-id238 . -1) (#("R" 0 1 (fontified t)) . -6906) (undo-tree-id239 . -1) (#("a" 0 1 (fontified t)) . -6907) (undo-tree-id240 . -1) (#("j" 0 1 (fontified t)) . -6908) (undo-tree-id241 . -1) (#(" " 0 1 (fontified t)) . -6909) (undo-tree-id242 . -1) (#("S" 0 1 (fontified t)) . -6910) (undo-tree-id243 . -1) (#("h" 0 1 (fontified t)) . -6911) (undo-tree-id244 . -1) (#("e" 0 1 (fontified t)) . -6912) (undo-tree-id245 . -1) (#("k" 0 1 (fontified t)) . -6913) (undo-tree-id246 . -1) (#("h" 0 1 (fontified t)) . -6914) (undo-tree-id247 . -1) (#("a" 0 1 (fontified t)) . -6915) (undo-tree-id248 . -1) (#("r" 0 1 (fontified t)) . -6916) (undo-tree-id249 . -1) 6917) nil (26138 22055 641092 316000) 0 nil])
([nil nil ((#("
    <footer class=\"footer\">
      <a
        href=\"https://github.com/rajshekhar26/cleanfolio-minimal\"
        class=\"link footer__link\"
      >
        C
      </a>
    </footer>

" 0 6 (fontified t) 6 12 (fontified t face font-lock-function-name-face) 12 13 (fontified t) 13 18 (fontified t face font-lock-variable-name-face) 18 19 (fontified t) 19 27 (fontified t face font-lock-string-face) 27 36 (fontified t) 36 37 (fontified t face font-lock-function-name-face) 37 44 (fontified t) 44 46 (fontified t) 46 50 (fontified t face font-lock-variable-name-face) 50 51 (fontified t) 51 103 (fontified t face font-lock-string-face) 103 104 (fontified t) 104 112 (fontified t) 112 113 (fontified t face font-lock-variable-name-face) 113 117 (fontified t face font-lock-variable-name-face) 117 118 (fontified t) 118 137 (fontified t face font-lock-string-face) 137 138 (fontified t) 138 146 (fontified t) 146 155 (fontified t) 155 156 (fontified t ws-butler-chg delete) 156 162 (fontified t) 162 164 (fontified t) 164 165 (fontified t face font-lock-function-name-face) 165 167 (fontified t) 167 173 (fontified t) 173 176 (fontified t face font-lock-function-name-face) 176 179 (fontified t face font-lock-function-name-face) 179 181 (fontified t) 181 182 (fontified t)) . 6741) (undo-tree-id224 . -181) (undo-tree-id225 . 27) (undo-tree-id226 . -181) (undo-tree-id227 . -181) (undo-tree-id228 . -181)) nil (26138 22055 641083 678000) 0 nil])
([nil nil ((#("s" 0 1 (fontified t face font-lock-string-face)) . -621) (undo-tree-id223 . -1) 622 (t 26138 21636 290357 175000)) nil (26138 22055 641081 725000) 0 nil])
([nil nil ((2468 . 2477) (#("j" 0 1 (fontified t ws-butler-chg chg face (bold-italic underline))) . -2468) (undo-tree-id157 . -1) (#("a" 0 1 (fontified t ws-butler-chg chg face (bold-italic underline))) . -2469) (undo-tree-id158 . -1) (#("v" 0 1 (fontified t ws-butler-chg chg face (bold-italic underline))) . -2470) (undo-tree-id159 . -1) (#("e" 0 1 (fontified t ws-butler-chg chg face (bold-italic underline))) . -2471) (undo-tree-id160 . -1) (#(" " 0 1 (fontified t ws-butler-chg chg face (bold-italic underline))) . -2472) (undo-tree-id161 . -1) 2473 (2468 . 2473) (#("j" 0 1 (fontified nil ws-butler-chg chg face (bold-italic underline))) . -2468) (undo-tree-id162 . -1) (2457 . 2469) (#("O" 0 1 (fontified t ws-butler-chg chg face (bold-italic underline))) . -2457) (undo-tree-id163 . -1) (#("m" 0 1 (fontified t ws-butler-chg chg face (bold-italic underline))) . -2458) (undo-tree-id164 . -1) (#("e" 0 1 (fontified t ws-butler-chg chg face (bold-italic underline))) . -2459) (undo-tree-id165 . -1) (#(" " 0 1 (fontified t ws-butler-chg chg face (bold-italic underline))) . -2460) (undo-tree-id166 . -1) (#("w" 0 1 (fontified t ws-butler-chg chg face (bold-italic underline))) . -2461) (undo-tree-id167 . -1) 2462 (2456 . 2462) (#("S" 0 1 (fontified t ws-butler-chg chg face (bold-italic underline))) . -2456) (undo-tree-id168 . -1) (#("o" 0 1 (fontified t ws-butler-chg chg face (bold-italic underline))) . -2457) (undo-tree-id169 . -1) (#("m" 0 1 (fontified t ws-butler-chg chg face (bold-italic underline))) . -2458) (undo-tree-id170 . -1) (#("e" 0 1 (fontified t ws-butler-chg chg face (bold-italic underline))) . -2459) (undo-tree-id171 . -1) (#(" " 0 1 (fontified t ws-butler-chg chg face (bold-italic underline))) . -2460) (undo-tree-id172 . -1) 2461 (2456 . 2461) (#("S" 0 1 (fontified t ws-butler-chg chg face (bold-italic underline))) . -2456) (undo-tree-id173 . -1) (undo-tree-id174 . -1) (undo-tree-id175 . -1) (#("t" 0 1 (fontified t ws-butler-chg chg face (bold-italic underline))) . -2457) (undo-tree-id176 . -1) (undo-tree-id177 . -1) (undo-tree-id178 . -1) (#("u" 0 1 (fontified t ws-butler-chg chg face (bold-italic underline))) . -2458) (undo-tree-id179 . -1) (undo-tree-id180 . -1) (undo-tree-id181 . -1) (#("f" 0 1 (fontified t ws-butler-chg chg face (bold-italic underline))) . -2459) (undo-tree-id182 . -1) (undo-tree-id183 . -1) (undo-tree-id184 . -1) (#("f" 0 1 (fontified t ws-butler-chg chg face (bold-italic underline))) . -2460) (undo-tree-id185 . -1) (undo-tree-id186 . -1) (undo-tree-id187 . -1) (#(" " 0 1 (fontified t ws-butler-chg chg face (bold-italic underline))) . -2461) (undo-tree-id188 . -1) (undo-tree-id189 . -1) (undo-tree-id190 . -1) (#("I" 0 1 (fontified t ws-butler-chg chg face (bold-italic underline))) . -2462) (undo-tree-id191 . -1) (undo-tree-id192 . -1) (undo-tree-id193 . -1) (#(" " 0 1 (fontified t ws-butler-chg chg face (bold-italic underline))) . -2463) (undo-tree-id194 . -1) (undo-tree-id195 . -1) (undo-tree-id196 . -1) (#("h" 0 1 (fontified t ws-butler-chg chg face (bold-italic underline))) . -2464) (undo-tree-id197 . -1) (undo-tree-id198 . -1) (undo-tree-id199 . -1) (#("a" 0 1 (fontified t ws-butler-chg chg face (bold-italic underline))) . -2465) (undo-tree-id200 . -1) (undo-tree-id201 . -1) (undo-tree-id202 . -1) 2466 (2464 . 2466) (#("j" 0 1 (fontified t ws-butler-chg chg face (bold-italic underline))) . -2464) (undo-tree-id203 . -1) (#("a" 0 1 (fontified t ws-butler-chg chg face (bold-italic underline))) . -2465) (undo-tree-id204 . -1) (#("v" 0 1 (fontified t ws-butler-chg chg face (bold-italic underline))) . -2466) (undo-tree-id205 . -1) 2467 (2464 . 2467) (#("j" 0 1 (fontified nil ws-butler-chg chg face (bold-italic underline))) . -2464) (undo-tree-id206 . -1) (2456 . 2465) (#("P" 0 1 (fontified t face (bold-italic underline))) . -2456) (undo-tree-id207 . -1) (undo-tree-id208 . -1) (#("r" 0 1 (fontified t face (bold-italic underline))) . -2457) (undo-tree-id209 . -1) (undo-tree-id210 . -1) (#("o" 0 1 (fontified t face (bold-italic underline))) . -2458) (undo-tree-id211 . -1) (undo-tree-id212 . -1) (#("j" 0 1 (fontified t face (bold-italic underline))) . -2459) (undo-tree-id213 . -1) (undo-tree-id214 . -1) (#("e" 0 1 (fontified t face (bold-italic underline))) . -2460) (undo-tree-id215 . -1) (undo-tree-id216 . -1) (#("c" 0 1 (fontified t face (bold-italic underline))) . -2461) (undo-tree-id217 . -1) (undo-tree-id218 . -1) (#("t" 0 1 (fontified t face (bold-italic underline))) . -2462) (undo-tree-id219 . -1) (undo-tree-id220 . -1) (#("s" 0 1 (fontified t face (bold-italic underline))) . -2463) (undo-tree-id221 . -1) (undo-tree-id222 . -1) 2464 (t 26138 21739 330335 293000)) nil (26138 22055 641076 812000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -1825) (undo-tree-id142 . -1) (undo-tree-id143 . -1) (#("N" 0 1 (fontified t)) . -1826) (undo-tree-id144 . -1) (undo-tree-id145 . -1) (#("i" 0 1 (fontified t)) . -1827) (undo-tree-id146 . -1) (undo-tree-id147 . -1) (#("k" 0 1 (fontified t)) . -1828) (undo-tree-id148 . -1) (undo-tree-id149 . -1) (#("i" 0 1 (fontified t)) . -1829) (undo-tree-id150 . -1) (undo-tree-id151 . -1) (#("t" 0 1 (fontified t)) . -1830) (undo-tree-id152 . -1) (undo-tree-id153 . -1) (#("i" 0 1 (fontified t)) . -1831) (undo-tree-id154 . -1) (undo-tree-id155 . -1) (#("n" 0 1 (fontified t)) . -1832) (undo-tree-id156 . -1) 1833) nil (26138 22055 641045 672000) 0 nil])
([nil nil ((1019 . 1024) (#("j" 0 1 (fontified nil ws-butler-chg chg)) . -1019) (undo-tree-id98 . -1) (1016 . 1020) (#("M" 0 1 (fontified t)) . -1016) (undo-tree-id99 . -1) (undo-tree-id100 . -1) (undo-tree-id101 . -1) (undo-tree-id102 . -1) (undo-tree-id103 . -1) (undo-tree-id104 . -1) (undo-tree-id105 . -1) (#("y" 0 1 (fontified t)) . -1017) (undo-tree-id106 . -1) (undo-tree-id107 . -1) (undo-tree-id108 . -1) (undo-tree-id109 . -1) (undo-tree-id110 . -1) (undo-tree-id111 . -1) (undo-tree-id112 . -1) (#(" " 0 1 (fontified t)) . -1018) (undo-tree-id113 . -1) (undo-tree-id114 . -1) (undo-tree-id115 . -1) (undo-tree-id116 . -1) (undo-tree-id117 . -1) (undo-tree-id118 . -1) (undo-tree-id119 . -1) (#("S" 0 1 (fontified t)) . -1019) (undo-tree-id120 . -1) (undo-tree-id121 . -1) (undo-tree-id122 . -1) (undo-tree-id123 . -1) (undo-tree-id124 . -1) (undo-tree-id125 . -1) (#("t" 0 1 (fontified t)) . -1020) (undo-tree-id126 . -1) (undo-tree-id127 . -1) (undo-tree-id128 . -1) (undo-tree-id129 . -1) (undo-tree-id130 . -1) (undo-tree-id131 . -1) (#("u" 0 1 (fontified t)) . -1021) (undo-tree-id132 . -1) (undo-tree-id133 . -1) (undo-tree-id134 . -1) (undo-tree-id135 . -1) (undo-tree-id136 . -1) (undo-tree-id137 . -1) (#("f" 0 1 (fontified t)) . -1022) (undo-tree-id138 . -1) (undo-tree-id139 . -1) (#("f" 0 1 (fontified t)) . -1023) (undo-tree-id140 . 1) (undo-tree-id141 . -1) 1024) nil (26138 22055 641034 587000) 0 nil])
([nil nil ((2564 . 2567) (#("=" 0 1 (fontified t ws-butler-chg chg face (italic underline))) . -2564) (undo-tree-id80 . -1) 2565 (2561 . 2565) (#("P" 0 1 (fontified t face (italic underline))) . -2561) (undo-tree-id81 . -1) (undo-tree-id82 . -1) (#("r" 0 1 (fontified t face (italic underline))) . -2562) (undo-tree-id83 . -1) (undo-tree-id84 . -1) (#("o" 0 1 (fontified t face (italic underline))) . -2563) (undo-tree-id85 . -1) (undo-tree-id86 . -1) (#("j" 0 1 (fontified t face (italic underline))) . -2564) (undo-tree-id87 . -1) (undo-tree-id88 . -1) (#("e" 0 1 (fontified t face (italic underline))) . -2565) (undo-tree-id89 . -1) (undo-tree-id90 . -1) (#("c" 0 1 (fontified t face (italic underline))) . -2566) (undo-tree-id91 . -1) (undo-tree-id92 . -1) (#("t" 0 1 (fontified t face (italic underline))) . -2567) (undo-tree-id93 . -1) (undo-tree-id94 . -1) (#(" " 0 1 (fontified t face (italic underline))) . -2568) (undo-tree-id95 . -1) (undo-tree-id96 . -1) (#("1" 0 1 (fontified t face (italic underline highlight-numbers-number))) . -2569) (undo-tree-id97 . -1) 2570 (t 26138 21862 750308 824000)) nil (26138 22055 641017 248000) 0 nil])
([nil nil ((#("              Ipsum accusamus ea excepturi aliquid eligendi amet. Explicabo
" 0 72 (fontified t) 72 76 (fontified t)) . 2618) (undo-tree-id76 . -22) (undo-tree-id77 . -75) (undo-tree-id78 . -22) (undo-tree-id79 . -76) 2640) nil (26138 22055 640999 232000) 0 nil])
([nil nil ((#("              sapiente debitis labore sed ipsam Mollitia repellat illum quod
" 0 1 (fontified t ws-butler-chg delete) 1 77 (fontified t)) . 2618) (undo-tree-id73 . -76) (undo-tree-id74 . -22) (undo-tree-id75 . -77) 2640) nil (26138 22055 640997 397000) 0 nil])
([nil nil ((#("              unde beatae Quis
" 0 1 (fontified t ws-butler-chg delete) 1 31 (fontified t)) . 2618) (undo-tree-id69 . 1) (undo-tree-id70 . -30) (undo-tree-id71 . -22) (undo-tree-id72 . -31) 2640) nil (26138 22055 640995 819000) 0 nil])
([nil nil ((3081 . 3082) (#("u" 0 1 (fontified t ws-butler-chg chg)) . -3081) (undo-tree-id22 . -1) 3082 (3071 . 3082) (#("R" 0 1 (fontified t)) . -3071) (undo-tree-id23 . -1) (#("e" 0 1 (fontified t)) . -3072) (undo-tree-id24 . -1) (#("a" 0 1 (fontified t)) . -3073) (undo-tree-id25 . -1) (#("c" 0 1 (fontified t)) . -3074) (undo-tree-id26 . -1) (#("t" 0 1 (fontified t)) . -3075) (undo-tree-id27 . -1) 3076 (3009 . 3019) (#("i" 0 1 (fontified t ws-butler-chg chg)) . -3009) (undo-tree-id28 . -1) (#("o" 0 1 (fontified t ws-butler-chg chg)) . -3010) (undo-tree-id29 . -1) 3011 (3008 . 3011) (#("T" 0 1 (fontified t)) . -3008) (undo-tree-id30 . -1) 3009 (#("y" 0 1 (fontified t)) . -3009) (undo-tree-id31 . -1) (#("p" 0 1 (fontified t)) . -3010) (undo-tree-id32 . -1) (#("e" 0 1 (fontified t)) . -3011) (undo-tree-id33 . -1) (#("S" 0 1 (fontified t)) . -3012) (undo-tree-id34 . -1) (#("c" 0 1 (fontified t)) . -3013) (undo-tree-id35 . -1) (#("r" 0 1 (fontified t)) . -3014) (undo-tree-id36 . -1) (#("i" 0 1 (fontified t)) . -3015) (undo-tree-id37 . -1) (#("p" 0 1 (fontified t)) . -3016) (undo-tree-id38 . -1) (#("t" 0 1 (fontified t)) . -3017) (undo-tree-id39 . -1) 3018 (2952 . 2956) (#("S" 0 1 (fontified t)) . -2952) (undo-tree-id40 . -1) (#("A" 0 1 (fontified t)) . -2953) (undo-tree-id41 . -1) (#("S" 0 1 (fontified t)) . -2954) (undo-tree-id42 . -1) (#("S" 0 1 (fontified t)) . -2955) (undo-tree-id43 . -1) 2956 (#("
" 0 1 (fontified t ws-butler-chg chg face highlight-numbers-number)) . -2848) (undo-tree-id44 . -1) (undo-tree-id45 . -1) 2849 (#("  " 0 2 (fontified t ws-butler-chg chg)) . -2849) (undo-tree-id46 . -2) 2851 (#("  " 0 2 (fontified t ws-butler-chg chg)) . -2851) (undo-tree-id47 . -2) 2853 (#("  " 0 2 (fontified t ws-butler-chg chg)) . -2853) (undo-tree-id48 . -2) 2855 (#("  " 0 2 (fontified t ws-butler-chg chg)) . -2855) (undo-tree-id49 . -2) 2857 (#("  " 0 2 (fontified t ws-butler-chg chg)) . -2857) (undo-tree-id50 . -2) 2859 (#("  " 0 2 (fontified t ws-butler-chg chg)) . -2859) (undo-tree-id51 . -2) 2861 (#("  " 0 2 (fontified t ws-butler-chg chg)) . -2861) (undo-tree-id52 . -2) 2863 (2848 . 2863) (2847 . 2848) (#("n" 0 1 (fontified t ws-butler-chg chg)) . -2822) (undo-tree-id53 . -1) (undo-tree-id54 . -1) (#(" " 0 1 (fontified t ws-butler-chg chg)) . -2823) (undo-tree-id55 . -1) (undo-tree-id56 . -1) (#("I" 0 1 (ws-butler-chg chg fontified t)) . -2824) (undo-tree-id57 . -1) 2825 (nil rear-nonsticky nil 2849 . 2850) (nil fontified nil 2824 . 2850) (2824 . 2850) (#("P" 0 1 (fontified t ws-butler-chg chg)) . -2824) (undo-tree-id58 . -1) (#("L" 0 1 (fontified t ws-butler-chg chg)) . -2825) (undo-tree-id59 . -1) (#("A" 0 1 (fontified t ws-butler-chg chg)) . -2826) (undo-tree-id60 . -1) 2827 (2811 . 2827) (2802 . 2811) (#("j" 0 1 (fontified nil ws-butler-chg chg)) . -2802) (undo-tree-id61 . -1) (2790 . 2803) (#("w" 0 1 (fontified t ws-butler-chg chg)) . -2790) (undo-tree-id62 . -1) 2791 (2777 . 2791) (2756 . 2777) (#("T" 0 1 (fontified t ws-butler-chg chg)) . -2756) (undo-tree-id63 . -1) (#("h" 0 1 (fontified t ws-butler-chg chg)) . -2757) (undo-tree-id64 . -1) (#("e" 0 1 (fontified t ws-butler-chg chg)) . -2758) (undo-tree-id65 . -1) (#(" " 0 1 (fontified t ws-butler-chg chg)) . -2759) (undo-tree-id66 . -1) 2760 (2756 . 2760) (2741 . 2756) (2734 . 2741) (2713 . 2734) (2692 . 2713) (2676 . 2692) (2655 . 2676) (2634 . 2655) (#("O" 0 1 (fontified t ws-butler-chg chg)) . -2634) (undo-tree-id67 . -1) (#("-" 0 1 (fontified t ws-butler-chg chg)) . -2635) (undo-tree-id68 . -1) 2636 (2632 . 2636) (2617 . 2632)) nil (26138 22055 640989 84000) 0 nil])
([nil nil ((#("<a
              href=\"https://example.com\"
              aria-label=\"live preview\"
              class=\"link link--icon\"
            >" 0 1 (fontified t) 1 2 (fontified t face font-lock-function-name-face) 2 11 (fontified t) 11 17 (fontified t) 17 21 (fontified t face font-lock-variable-name-face) 21 22 (fontified t) 22 28 (fontified t face font-lock-string-face) 28 43 (fontified t face font-lock-string-face) 43 44 (fontified t) 44 58 (fontified t) 58 60 (fontified t face font-lock-variable-name-face) 60 68 (fontified t face font-lock-variable-name-face) 68 69 (fontified t) 69 83 (fontified t face font-lock-string-face) 83 84 (fontified t) 84 98 (fontified t) 98 103 (fontified t face font-lock-variable-name-face) 103 104 (fontified t) 104 121 (fontified t face font-lock-string-face) 121 135 (fontified t)) . 3345) (undo-tree-id13 . -134) (undo-tree-id14 . -134) (undo-tree-id15 . -134) (undo-tree-id16 . -134) (undo-tree-id17 . -134) (undo-tree-id18 . 1) (undo-tree-id19 . -135) (undo-tree-id20 . 135) (undo-tree-id21 . -1) 3479) nil (26138 22055 640963 966000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . -3332) (undo-tree-id5 . -1) (undo-tree-id6 . -1) 3333 (#("  " 0 2 (fontified t)) . -3333) (undo-tree-id7 . -2) 3335 (#("  " 0 2 (fontified t)) . -3335) (undo-tree-id8 . -2) 3337 (#("  " 0 2 (fontified t)) . -3337) (undo-tree-id9 . -2) 3339 (#("  " 0 2 (fontified t)) . -3339) (undo-tree-id10 . -2) 3341 (#("  " 0 2 (fontified t)) . -3341) (undo-tree-id11 . -2) 3343 (#(" " 0 1 (fontified t)) . -3343) (undo-tree-id12 . -1) 3344) nil (26138 22055 640958 765000) 0 nil])
([nil nil ((#("              <i aria-hidden=\"true\" class=\"fas fa-external-link-alt\"></i>
" 0 15 (fontified t) 15 16 (fontified t face font-lock-function-name-face) 16 17 (fontified t) 17 28 (fontified t face font-lock-variable-name-face) 28 29 (fontified t) 29 35 (fontified t face font-lock-string-face) 35 36 (fontified t) 36 41 (fontified t face font-lock-variable-name-face) 41 42 (fontified t) 42 50 (fontified t face font-lock-string-face) 50 68 (fontified t face font-lock-string-face) 68 71 (fontified t) 71 72 (fontified t face font-lock-function-name-face) 72 74 (fontified t)) . 3334) (undo-tree-id2 . -73) (undo-tree-id3 . -15) (undo-tree-id4 . -74) 3349) nil (26138 22055 640954 387000) 0 nil])
([nil nil ((3330 . 3331) (#("a" 0 1 (fontified t face font-lock-function-name-face)) . 3330)) nil (26138 22055 640952 525000) 0 nil])
([nil nil ((3330 . 3331) (#("a" 0 1 (fontified t face font-lock-function-name-face)) . 3330)) nil (26138 22055 640951 991000) 0 nil])
([nil nil ((nil ws-butler-chg delete 3408 . 3409) (3334 . 3408)) nil (26138 22055 640951 452000) 0 nil])
([nil nil ((3333 . 3344) (nil ws-butler-chg delete 3333 . 3334) (3332 . 3333)) nil (26138 22055 640950 661000) 0 nil])
([nil nil ((nil ws-butler-chg delete 3480 . 3481) (3345 . 3480)) nil (26138 22055 640949 688000) 0 nil])
([nil nil ((#("
              " 0 1 (fontified t ws-butler-chg chg) 1 15 (fontified t ws-butler-chg chg)) . 2617) (#("TCO-" 0 1 (fontified t ws-butler-chg chg) 1 2 (fontified t ws-butler-chg chg) 2 3 (fontified nil ws-butler-chg chg) 3 4 (fontified nil ws-butler-chg chg)) . 2632) (2634 . 2636) (#("P-ST is a session-typ" 0 1 (fontified t ws-butler-chg chg) 1 2 (fontified t ws-butler-chg chg) 2 3 (fontified t ws-butler-chg chg) 3 4 (fontified t ws-butler-chg chg) 4 5 (fontified t ws-butler-chg chg) 5 6 (fontified t ws-butler-chg chg) 6 7 (fontified t ws-butler-chg chg) 7 8 (fontified t ws-butler-chg chg) 8 9 (fontified t ws-butler-chg chg) 9 10 (fontified t ws-butler-chg chg) 10 11 (fontified t ws-butler-chg chg) 11 12 (fontified t ws-butler-chg chg) 12 13 (fontified t ws-butler-chg chg) 13 14 (fontified t ws-butler-chg chg) 14 15 (fontified t ws-butler-chg chg) 15 16 (fontified t ws-butler-chg chg) 16 17 (fontified t ws-butler-chg chg) 17 18 (fontified t ws-butler-chg chg) 18 19 (fontified t ws-butler-chg chg) 19 20 (fontified t ws-butler-chg chg) 20 21 (fontified t ws-butler-chg chg)) . 2634) (#("e based implementatio" 0 1 (fontified t ws-butler-chg chg) 1 2 (fontified t ws-butler-chg chg) 2 3 (fontified t ws-butler-chg chg) 3 4 (fontified t ws-butler-chg chg) 4 5 (fontified t ws-butler-chg chg) 5 6 (fontified t ws-butler-chg chg) 6 7 (fontified t ws-butler-chg chg) 7 8 (fontified t ws-butler-chg chg) 8 9 (fontified t ws-butler-chg chg) 9 10 (fontified t ws-butler-chg chg) 10 11 (fontified t ws-butler-chg chg) 11 12 (fontified t ws-butler-chg chg) 12 13 (fontified t ws-butler-chg chg) 13 14 (fontified t ws-butler-chg chg) 14 15 (fontified t ws-butler-chg chg) 15 16 (fontified t ws-butler-chg chg) 16 17 (fontified t ws-butler-chg chg) 17 18 (fontified t ws-butler-chg chg) 18 19 (fontified t ws-butler-chg chg) 19 20 (fontified t ws-butler-chg chg) 20 21 (fontified t ws-butler-chg chg)) . 2655) (#("n of the core TC" 0 1 (fontified t ws-butler-chg chg) 1 2 (fontified t ws-butler-chg chg) 2 3 (fontified t ws-butler-chg chg) 3 4 (fontified t ws-butler-chg chg) 4 5 (fontified t ws-butler-chg chg) 5 6 (fontified t ws-butler-chg chg) 6 7 (fontified t ws-butler-chg chg) 7 8 (fontified t ws-butler-chg chg) 8 9 (fontified t ws-butler-chg chg) 9 10 (fontified t ws-butler-chg chg) 10 11 (fontified t ws-butler-chg chg) 11 12 (fontified t ws-butler-chg chg) 12 13 (fontified t ws-butler-chg chg) 13 14 (fontified t ws-butler-chg chg) 14 15 (fontified t ws-butler-chg chg) 15 16 (fontified t ws-butler-chg chg)) . 2676) (#("P state machine in th" 0 1 (fontified t ws-butler-chg chg) 1 2 (fontified t ws-butler-chg chg) 2 3 (fontified t ws-butler-chg chg) 3 4 (fontified t ws-butler-chg chg) 4 5 (fontified t ws-butler-chg chg) 5 6 (fontified t ws-butler-chg chg) 6 7 (fontified t ws-butler-chg chg) 7 8 (fontified t ws-butler-chg chg) 8 9 (fontified t ws-butler-chg chg) 9 10 (fontified t ws-butler-chg chg) 10 11 (fontified t ws-butler-chg chg) 11 12 (fontified t ws-butler-chg chg) 12 13 (fontified t ws-butler-chg chg) 13 14 (fontified t ws-butler-chg chg) 14 15 (fontified t ws-butler-chg chg) 15 16 (fontified t ws-butler-chg chg) 16 17 (fontified t ws-butler-chg chg) 17 18 (fontified t ws-butler-chg chg) 18 19 (fontified t ws-butler-chg chg) 19 20 (fontified t ws-butler-chg chg) 20 21 (fontified t ws-butler-chg chg)) . 2692) (#("e Rust programming la" 0 1 (fontified t ws-butler-chg chg) 1 2 (fontified t ws-butler-chg chg) 2 3 (fontified t ws-butler-chg chg) 3 4 (fontified t ws-butler-chg chg) 4 5 (fontified t ws-butler-chg chg) 5 6 (fontified t ws-butler-chg chg) 6 7 (fontified t ws-butler-chg chg) 7 8 (fontified t ws-butler-chg chg) 8 9 (fontified t ws-butler-chg chg) 9 10 (fontified t ws-butler-chg chg) 10 11 (fontified t ws-butler-chg chg) 11 12 (fontified t ws-butler-chg chg) 12 13 (fontified t ws-butler-chg chg) 13 14 (fontified t ws-butler-chg chg) 14 15 (fontified t ws-butler-chg chg) 15 16 (fontified t ws-butler-chg chg) 16 17 (fontified t ws-butler-chg chg) 17 18 (fontified t ws-butler-chg chg) 18 19 (fontified t ws-butler-chg chg) 19 20 (fontified t ws-butler-chg chg) 20 21 (fontified t ws-butler-chg chg)) . 2713) (#("nguage." 0 1 (fontified t ws-butler-chg chg) 1 2 (fontified t ws-butler-chg chg) 2 3 (fontified t ws-butler-chg chg) 3 4 (fontified t ws-butler-chg chg) 4 5 (fontified t ws-butler-chg chg) 5 6 (fontified t ws-butler-chg chg) 6 7 (fontified t ws-butler-chg chg)) . 2734) (#("
              " 0 1 (fontified t ws-butler-chg chg) 1 15 (fontified t ws-butler-chg chg)) . 2741) (#("The " 0 1 (fontified nil ws-butler-chg chg) 1 2 (fontified nil ws-butler-chg chg) 2 3 (fontified nil ws-butler-chg chg) 3 4 (fontified nil ws-butler-chg chg)) . 2756) (2756 . 2760) (#("An extension of the o" 0 1 (fontified t ws-butler-chg chg) 1 2 (fontified t ws-butler-chg chg) 2 3 (fontified t ws-butler-chg chg) 3 4 (fontified t ws-butler-chg chg) 4 5 (fontified t ws-butler-chg chg) 5 6 (fontified t ws-butler-chg chg) 6 7 (fontified t ws-butler-chg chg) 7 8 (fontified t ws-butler-chg chg) 8 9 (fontified t ws-butler-chg chg) 9 10 (fontified t ws-butler-chg chg) 10 11 (fontified t ws-butler-chg chg) 11 12 (fontified t ws-butler-chg chg) 12 13 (fontified t ws-butler-chg chg) 13 14 (fontified t ws-butler-chg chg) 14 15 (fontified t ws-butler-chg chg) 15 16 (fontified t ws-butler-chg chg) 16 17 (fontified t ws-butler-chg chg) 17 18 (fontified t ws-butler-chg chg) 18 19 (fontified t ws-butler-chg chg) 19 20 (fontified t ws-butler-chg chg) 20 21 (fontified t ws-butler-chg chg)) . 2756) (#("riginal work w" 0 1 (fontified t ws-butler-chg chg) 1 2 (fontified t ws-butler-chg chg) 2 3 (fontified t ws-butler-chg chg) 3 4 (fontified t ws-butler-chg chg) 4 5 (fontified t ws-butler-chg chg) 5 6 (fontified t ws-butler-chg chg) 6 7 (fontified t ws-butler-chg chg) 7 8 (fontified t ws-butler-chg chg) 8 9 (fontified t ws-butler-chg chg) 9 10 (fontified t ws-butler-chg chg) 10 11 (fontified t ws-butler-chg chg) 11 12 (fontified t ws-butler-chg chg) 12 13 (fontified t ws-butler-chg chg) 13 14 (fontified nil ws-butler-chg chg)) . 2777) (2790 . 2791) (#("for this proj" 0 1 (fontified t ws-butler-chg chg) 1 2 (fontified t ws-butler-chg chg) 2 3 (fontified t ws-butler-chg chg) 3 4 (fontified t ws-butler-chg chg) 4 5 (fontified t ws-butler-chg chg) 5 6 (fontified t ws-butler-chg chg) 6 7 (fontified t ws-butler-chg chg) 7 8 (fontified t ws-butler-chg chg) 8 9 (fontified t ws-butler-chg chg) 9 10 (fontified t ws-butler-chg chg) 10 11 (fontified t ws-butler-chg chg) 11 12 (fontified t ws-butler-chg chg) 12 13 (fontified nil ws-butler-chg chg)) . 2790) (2802 . 2803) (#("ject was " 0 2 (fontified t ws-butler-chg chg) 2 3 (fontified t ws-butler-chg chg) 3 4 (fontified t ws-butler-chg chg) 4 5 (fontified t ws-butler-chg chg) 5 6 (fontified t ws-butler-chg chg) 6 7 (fontified t ws-butler-chg chg) 7 8 (fontified t ws-butler-chg chg) 8 9 (fontified t ws-butler-chg chg)) . 2802) (#("published in PLA" 0 1 (fontified t ws-butler-chg chg) 1 2 (fontified t ws-butler-chg chg) 2 3 (fontified t ws-butler-chg chg) 3 4 (fontified t ws-butler-chg chg) 4 5 (fontified t ws-butler-chg chg) 5 6 (fontified t ws-butler-chg chg) 6 7 (fontified t ws-butler-chg chg) 7 8 (fontified t ws-butler-chg chg) 8 9 (fontified t ws-butler-chg chg) 9 10 (fontified t ws-butler-chg chg) 10 11 (fontified t ws-butler-chg chg) 11 12 (fontified nil ws-butler-chg chg) 12 13 (fontified nil ws-butler-chg chg) 13 14 (fontified nil ws-butler-chg chg) 14 15 (fontified nil ws-butler-chg chg) 15 16 (fontified nil ws-butler-chg chg)) . 2811) (2824 . 2827) (#("In Proceedings PLACES 2024" 0 1 (ws-butler-chg chg fontified nil) 1 2 (fontified nil) 2 22 (ws-butler-chg chg fontified nil) 22 25 (ws-butler-chg chg fontified nil face highlight-numbers-number) 25 26 (ws-butler-chg chg fontified nil rear-nonsticky nil face highlight-numbers-number)) . 2824) (nil fontified t 2846 . 2849) (nil fontified t 2826 . 2846) (nil rear-nonsticky t 2849 . 2850) (2823 . 2825) (nil ws-butler-chg delete 2823 . 2824) (2822 . 2823) (#("." 0 1 (fontified t ws-butler-chg chg face highlight-numbers-number)) . 2847) (#("
              " 0 1 (fontified nil ws-butler-chg chg face highlight-numbers-number) 1 3 (fontified nil ws-butler-chg chg) 3 5 (fontified nil ws-butler-chg chg) 5 7 (fontified nil ws-butler-chg chg) 7 9 (fontified nil ws-butler-chg chg) 9 11 (fontified nil ws-butler-chg chg) 11 13 (fontified nil ws-butler-chg chg) 13 15 (fontified nil ws-butler-chg chg)) . 2848) (2849 . 2863) (nil ws-butler-chg delete 2849 . 2850) (2848 . 2849) (2953 . 2956) (nil ws-butler-chg delete 2953 . 2954) (2952 . 2953) (#("Rust" 0 1 (fontified t ws-butler-chg chg) 1 2 (fontified t ws-butler-chg chg) 2 3 (fontified t ws-butler-chg chg) 3 4 (fontified t ws-butler-chg chg)) . 2952) (3008 . 3018) (#("Cio" 0 1 (fontified t ws-butler-chg chg) 1 2 (fontified nil ws-butler-chg chg) 2 3 (fontified nil ws-butler-chg chg)) . 3008) (3010 . 3011) (nil ws-butler-chg delete 3010 . 3011) (3009 . 3010) (#("oncurrency" 0 1 (fontified t ws-butler-chg chg) 1 2 (fontified t ws-butler-chg chg) 2 3 (fontified t ws-butler-chg chg) 3 4 (fontified t ws-butler-chg chg) 4 5 (fontified t ws-butler-chg chg) 5 6 (fontified t ws-butler-chg chg) 6 7 (fontified t ws-butler-chg chg) 7 8 (fontified t ws-butler-chg chg) 8 9 (fontified t ws-butler-chg chg) 9 10 (fontified t ws-butler-chg chg)) . 3009) (3071 . 3076) (#("Type Theoru" 0 1 (fontified t ws-butler-chg chg) 1 2 (fontified t ws-butler-chg chg) 2 3 (fontified t ws-butler-chg chg) 3 4 (fontified t ws-butler-chg chg) 4 5 (fontified t ws-butler-chg chg) 5 6 (fontified t ws-butler-chg chg) 6 7 (fontified t ws-butler-chg chg) 7 8 (fontified t ws-butler-chg chg) 8 9 (fontified t ws-butler-chg chg) 9 10 (fontified t ws-butler-chg chg) 10 11 (fontified nil ws-butler-chg chg)) . 3071) (undo-tree-id0 . -4) (undo-tree-id1 . -4) (nil ws-butler-chg delete 3082 . 3083) (3081 . 3082) (#("y" 0 1 (fontified t ws-butler-chg chg)) . 3081)) nil (26138 22055 640945 630000) 0 nil])
([nil nil ((2617 . 2632)) nil (26138 22077 216876 813000) 0 nil])
([nil nil ((#("<a
              href=\"https://example.com\"
              aria-label=\"live preview\"
              class=\"link link--icon\"
            >
              <i aria-hidden=\"true\" class=\"fas fa-external-link-alt\"></i>
            <" 0 1 (fontified t) 1 2 (fontified t face font-lock-function-name-face) 2 11 (fontified t) 11 17 (fontified t) 17 21 (face font-lock-variable-name-face fontified t) 21 22 (fontified t) 22 28 (face font-lock-string-face fontified t) 28 43 (face font-lock-string-face fontified t) 43 44 (fontified t) 44 58 (fontified t) 58 60 (fontified t face font-lock-variable-name-face) 60 68 (fontified t face font-lock-variable-name-face) 68 69 (fontified t) 69 83 (fontified t face font-lock-string-face) 83 84 (fontified t) 84 98 (fontified t) 98 103 (fontified t face font-lock-variable-name-face) 103 104 (fontified t) 104 121 (fontified t face font-lock-string-face) 121 135 (fontified t) 135 136 (fontified t) 136 151 (fontified t) 151 152 (fontified t face font-lock-function-name-face) 152 153 (fontified t) 153 164 (fontified t face font-lock-variable-name-face) 164 165 (fontified t) 165 171 (fontified t face font-lock-string-face) 171 172 (fontified t) 172 177 (fontified t face font-lock-variable-name-face) 177 178 (fontified t) 178 186 (fontified t face font-lock-string-face) 186 204 (fontified t face font-lock-string-face) 204 207 (fontified t) 207 208 (fontified t face font-lock-function-name-face) 208 210 (fontified t) 210 211 (fontified t) 211 223 (fontified t)) . 3122) (undo-tree-id466 . -222) (undo-tree-id467 . -222) (undo-tree-id468 . -222) (undo-tree-id469 . -151) (undo-tree-id470 . -151) (undo-tree-id471 . -151) (undo-tree-id472 . -151) (undo-tree-id473 . -134) (undo-tree-id474 . -134) (undo-tree-id475 . -134) (undo-tree-id476 . -16) (undo-tree-id477 . -222) (undo-tree-id478 . -16) (undo-tree-id479 . -16) (undo-tree-id480 . -222) (undo-tree-id481 . 1) (undo-tree-id482 . -223) 3344) nil (26138 22077 216875 745000) 0 nil])
([nil nil ((#("            /a>
" 0 2 (fontified t) 2 4 (fontified t) 4 6 (fontified t) 6 8 (fontified t) 8 10 (fontified t) 10 11 (fontified t) 11 12 (fontified t) 12 13 (fontified t ws-butler-chg delete) 13 14 (fontified t) 14 15 (fontified t syntax-table (1)) 15 16 (fontified t)) . 3110) (undo-tree-id443 . -12) (undo-tree-id444 . -15) (undo-tree-id445 . -12) (undo-tree-id446 . 4) (undo-tree-id447 . -12) (undo-tree-id448 . -12) (undo-tree-id449 . -15) (undo-tree-id450 . -12) (undo-tree-id451 . -12) (undo-tree-id452 . -12) (undo-tree-id453 . -12) (undo-tree-id454 . -11) (undo-tree-id455 . -11) (undo-tree-id456 . -11) (undo-tree-id457 . -11) (undo-tree-id458 . -12) (undo-tree-id459 . -12) (undo-tree-id460 . -12) (undo-tree-id461 . -12) (undo-tree-id462 . -13) (undo-tree-id463 . -12) (undo-tree-id464 . -12) (undo-tree-id465 . -16) 3123) nil (26138 22077 216869 83000) 0 nil])
([nil nil ((#("              " 0 14 (fontified t ws-butler-chg chg)) . 2618)) nil (26138 22077 216849 184000) 0 nil])
([nil nil ((2475 . 2483) (t 26138 22077 210266 545000)) nil (26138 22178 433008 899000) 0 nil])
([nil nil ((3165 . 3166) (3155 . 3165) (#("R" 0 1 (fontified t)) . -3155) (undo-tree-id483 . -1) (#("e" 0 1 (fontified t)) . -3156) (undo-tree-id484 . -1) (#("a" 0 1 (fontified t)) . -3157) (undo-tree-id485 . -1) (#("c" 0 1 (fontified t)) . -3158) (undo-tree-id486 . -1) (#("t" 0 1 (fontified t)) . -3159) (undo-tree-id487 . -1) 3160 (3092 . 3103) (#("T" 0 1 (fontified t)) . -3092) (undo-tree-id488 . -1) (#("y" 0 1 (fontified t)) . -3093) (undo-tree-id489 . -1) (#("p" 0 1 (fontified t)) . -3094) (undo-tree-id490 . -1) (#("e" 0 1 (fontified t)) . -3095) (undo-tree-id491 . -1) (#("S" 0 1 (fontified t)) . -3096) (undo-tree-id492 . -1) (#("c" 0 1 (fontified t)) . -3097) (undo-tree-id493 . -1) (#("r" 0 1 (fontified t)) . -3098) (undo-tree-id494 . -1) (#("i" 0 1 (fontified t)) . -3099) (undo-tree-id495 . -1) (#("p" 0 1 (fontified t)) . -3100) (undo-tree-id496 . -1) (#("t" 0 1 (fontified t)) . -3101) (undo-tree-id497 . -1) 3102 (3036 . 3040) (#("T" 0 1 (fontified t ws-butler-chg chg)) . -3036) (undo-tree-id498 . -1) (#("R" 0 1 (fontified t ws-butler-chg chg)) . -3037) (undo-tree-id499 . -1) 3038 (3036 . 3038) (#("S" 0 1 (fontified t)) . -3036) (undo-tree-id500 . -1) (#("A" 0 1 (fontified t)) . -3037) (undo-tree-id501 . -1) (#("S" 0 1 (fontified t)) . -3038) (undo-tree-id502 . -1) (#("S" 0 1 (fontified t)) . -3039) (undo-tree-id503 . -1) 3040 (2923 . 2928) (2902 . 2923) (#(" " 0 1 (fontified t ws-butler-chg chg)) . -2902) (undo-tree-id504 . -1) 2903 (nil rear-nonsticky nil 2899 . 2900) (nil fontified nil 2868 . 2900) (2868 . 2900) (2873 . 2874) (2872 . 2873) (2871 . 2873) (#("<" 0 1 (fontified nil ws-butler-chg chg)) . -2871) (2870 . 2872) (#("\"" 0 1 (fontified t ws-butler-chg chg face font-lock-string-face)) . -2869) (undo-tree-id505 . -1) 2870 (2868 . 2870) (#("\"" 0 1 (fontified nil ws-butler-chg chg face font-lock-string-face)) . -2868) (2866 . 2869) (#(" " 0 1 (fontified t ws-butler-chg chg)) . -2866) (undo-tree-id506 . -1) (#("=" 0 1 (fontified t ws-butler-chg chg)) . -2867) (undo-tree-id507 . -1) 2868 (2860 . 2868) (2859 . 2861) (#("<" 0 1 (fontified nil ws-butler-chg chg)) . -2859) (2859 . 2860) (2844 . 2859) (#("<" 0 1 (fontified t ws-butler-chg chg)) . -2818) (undo-tree-id508 . -1) (undo-tree-id509 . 1) (undo-tree-id510 . -1) (undo-tree-id511 . -1) (#(">" 0 1 (fontified t ws-butler-chg chg)) . 2819) (undo-tree-id512 . 1) (undo-tree-id513 . -1) (2818 . 2820) (#("<" 0 1 (fontified nil ws-butler-chg chg)) . -2818) (2818 . 2819) (2836 . 2844) (#("V" 0 1 (fontified t ws-butler-chg chg)) . -2836) (undo-tree-id514 . -1) (#("E" 0 1 (fontified t ws-butler-chg chg)) . -2837) (undo-tree-id515 . -1) (#("S" 0 1 (fontified t ws-butler-chg chg)) . -2838) (undo-tree-id516 . -1) 2839 (2824 . 2839) (2816 . 2824) (2795 . 2816) (2774 . 2795) (2753 . 2774) (#("y" 0 1 (fontified t ws-butler-chg chg)) . -2753) (undo-tree-id517 . -1) 2754 (2751 . 2754) (2748 . 2751) (#("s" 0 1 (fontified t ws-butler-chg chg)) . -2748) (undo-tree-id518 . -1) (#("u" 0 1 (fontified t ws-butler-chg chg)) . -2749) (undo-tree-id519 . -1) (#("p" 0 1 (fontified t ws-butler-chg chg)) . -2750) (undo-tree-id520 . -1) (#("e" 0 1 (fontified t ws-butler-chg chg)) . -2751) (undo-tree-id521 . -1) (#("r" 0 1 (fontified t ws-butler-chg chg)) . -2752) (undo-tree-id522 . -1) 2753 (2750 . 2753) (#("p" 0 1 (fontified t ws-butler-chg chg)) . -2750) (undo-tree-id523 . -1) 2751 (2747 . 2751) (2726 . 2747) (#("A" 0 1 (fontified t ws-butler-chg chg)) . -2726) (undo-tree-id524 . -1) (undo-tree-id525 . -1) (undo-tree-id526 . -1) (#("n" 0 1 (fontified t ws-butler-chg chg)) . -2727) (undo-tree-id527 . -1) (undo-tree-id528 . -1) (undo-tree-id529 . -1) (#(" " 0 1 (fontified t ws-butler-chg chg)) . -2728) (undo-tree-id530 . -1) (undo-tree-id531 . -1) (undo-tree-id532 . -1) (#("e" 0 1 (fontified t ws-butler-chg chg)) . -2729) (undo-tree-id533 . -1) (undo-tree-id534 . -1) (undo-tree-id535 . -1) (#("x" 0 1 (fontified t ws-butler-chg chg)) . -2730) (undo-tree-id536 . -1) (undo-tree-id537 . -1) (undo-tree-id538 . -1) (#("t" 0 1 (fontified t ws-butler-chg chg)) . -2731) (undo-tree-id539 . -1) (undo-tree-id540 . -1) (undo-tree-id541 . -1) (#("e" 0 1 (fontified t ws-butler-chg chg)) . -2732) (undo-tree-id542 . -1) (undo-tree-id543 . -1) (undo-tree-id544 . -1) (#("n" 0 1 (fontified t ws-butler-chg chg)) . -2733) (undo-tree-id545 . -1) (undo-tree-id546 . -1) (undo-tree-id547 . -1) (#("s" 0 1 (fontified t ws-butler-chg chg)) . -2734) (undo-tree-id548 . -1) (undo-tree-id549 . -1) (undo-tree-id550 . -1) (#("i" 0 1 (fontified t ws-butler-chg chg)) . -2735) (undo-tree-id551 . -1) (undo-tree-id552 . -1) (undo-tree-id553 . -1) (#("o" 0 1 (fontified t ws-butler-chg chg)) . -2736) (undo-tree-id554 . -1) (undo-tree-id555 . -1) (undo-tree-id556 . -1) (#("n" 0 1 (fontified t ws-butler-chg chg)) . -2737) (undo-tree-id557 . -1) (undo-tree-id558 . -1) (undo-tree-id559 . -1) (#(" " 0 1 (fontified t ws-butler-chg chg)) . -2738) (undo-tree-id560 . -1) (undo-tree-id561 . -1) (undo-tree-id562 . -1) (#("o" 0 1 (fontified t ws-butler-chg chg)) . -2739) (undo-tree-id563 . -1) (undo-tree-id564 . -1) (undo-tree-id565 . -1) (#("f" 0 1 (fontified t ws-butler-chg chg)) . -2740) (undo-tree-id566 . -1) (undo-tree-id567 . -1) (undo-tree-id568 . -1) (#(" " 0 1 (fontified t ws-butler-chg chg)) . -2741) (undo-tree-id569 . -1) (undo-tree-id570 . -1) (undo-tree-id571 . -1) (#("t" 0 1 (fontified t ws-butler-chg chg)) . -2742) (undo-tree-id572 . -1) (undo-tree-id573 . -1) (undo-tree-id574 . -1) (#("h" 0 1 (fontified t ws-butler-chg chg)) . -2743) (undo-tree-id575 . -1) (undo-tree-id576 . -1) (undo-tree-id577 . -1) 2744 (2730 . 2744) (2726 . 2730) (2711 . 2726) (2700 . 2711) (2679 . 2700) (2673 . 2679) (#("o" 0 1 (fontified t ws-butler-chg chg)) . -2673) (undo-tree-id578 . -1) (#("o" 0 1 (fontified t ws-butler-chg chg)) . -2674) (undo-tree-id579 . -1) 2675 (2661 . 2675) (2640 . 2661) (2626 . 2640)) nil (26138 22178 433001 860000) 0 nil])
([nil nil ((#("        " 0 8 (fontified t ws-butler-chg chg)) . 2475)) nil (26138 22178 432928 97000) 0 nil])
([nil nil ((nil rear-nonsticky nil 3251 . 3252) (nil fontified nil 3218 . 3252) (3218 . 3252) (#("h" 0 1 (fontified t face font-lock-string-face)) . -3218) (undo-tree-id580 . -1) (undo-tree-id581 . -1) (#("t" 0 1 (fontified t face font-lock-string-face)) . -3219) (undo-tree-id582 . -1) (undo-tree-id583 . -1) (#("t" 0 1 (fontified t face font-lock-string-face)) . -3220) (undo-tree-id584 . -1) (undo-tree-id585 . -1) (#("p" 0 1 (fontified t face font-lock-string-face)) . -3221) (undo-tree-id586 . -1) (undo-tree-id587 . -1) (#("s" 0 1 (fontified t face font-lock-string-face)) . -3222) (undo-tree-id588 . -1) (undo-tree-id589 . -1) (#(":" 0 1 (fontified t face font-lock-string-face)) . -3223) (undo-tree-id590 . -1) (undo-tree-id591 . -1) (#("/" 0 1 (fontified t face font-lock-string-face)) . -3224) (undo-tree-id592 . -1) (undo-tree-id593 . -1) (#("/" 0 1 (fontified t face font-lock-string-face)) . -3225) (undo-tree-id594 . -1) (undo-tree-id595 . -1) (#("g" 0 1 (fontified t face font-lock-string-face)) . -3226) (undo-tree-id596 . -1) (undo-tree-id597 . -1) (#("i" 0 1 (fontified t face font-lock-string-face)) . -3227) (undo-tree-id598 . -1) (undo-tree-id599 . -1) (#("t" 0 1 (fontified t face font-lock-string-face)) . -3228) (undo-tree-id600 . -1) (undo-tree-id601 . -1) (#("h" 0 1 (fontified t face font-lock-string-face)) . -3229) (undo-tree-id602 . -1) (undo-tree-id603 . -1) (#("u" 0 1 (fontified t face font-lock-string-face)) . -3230) (undo-tree-id604 . -1) (undo-tree-id605 . -1) (#("b" 0 1 (fontified t face font-lock-string-face)) . -3231) (undo-tree-id606 . -1) (undo-tree-id607 . -1) (#("." 0 1 (fontified t face font-lock-string-face)) . -3232) (undo-tree-id608 . -1) (undo-tree-id609 . -1) (#("c" 0 1 (fontified t face font-lock-string-face)) . -3233) (undo-tree-id610 . -1) (undo-tree-id611 . -1) (#("o" 0 1 (fontified t face font-lock-string-face)) . -3234) (undo-tree-id612 . -1) (undo-tree-id613 . -1) (#("m" 0 1 (fontified t face font-lock-string-face)) . -3235) (undo-tree-id614 . -1) (undo-tree-id615 . -1) 3236 (t 26138 22178 420246 41000)) nil (26138 22194 618744 948000) 0 nil])
([nil nil ((3961 . 3967) (#("R" 0 1 (fontified t)) . -3961) (undo-tree-id735 . -1) (#("e" 0 1 (fontified t)) . -3962) (undo-tree-id736 . -1) (#("a" 0 1 (fontified t)) . -3963) (undo-tree-id737 . -1) (#("c" 0 1 (fontified t)) . -3964) (undo-tree-id738 . -1) (#("t" 0 1 (fontified t)) . -3965) (undo-tree-id739 . -1) 3966 (3904 . 3909) (3844 . 3852) (#("F" 0 1 (fontified t ws-butler-chg chg)) . -3838) (undo-tree-id740 . -1) (#("l" 0 1 (fontified t ws-butler-chg chg)) . -3839) (undo-tree-id741 . -1) (#("a" 0 1 (fontified t ws-butler-chg chg)) . -3840) (undo-tree-id742 . -1) (#("s" 0 1 (fontified t ws-butler-chg chg)) . -3841) (undo-tree-id743 . -1) (#("k" 0 1 (fontified t ws-butler-chg chg)) . -3842) (undo-tree-id744 . -1) (#(" " 0 1 (fontified t ws-butler-chg chg)) . -3843) (undo-tree-id745 . -1) (#("-" 0 1 (fontified t ws-butler-chg chg)) . -3844) (undo-tree-id746 . -1) (#(" " 0 1 (fontified t ws-butler-chg chg)) . -3845) (undo-tree-id747 . -1) 3846 (3843 . 3846) (#(" " 0 1 (fontified t ws-butler-chg chg)) . -3843) (undo-tree-id748 . -1) 3844 (3838 . 3844) (#("T" 0 1 (fontified t)) . -3896) (undo-tree-id749 . -1) (#("y" 0 1 (fontified t)) . -3897) (undo-tree-id750 . -1) (#("p" 0 1 (fontified t)) . -3898) (undo-tree-id751 . -1) (#("e" 0 1 (fontified t)) . -3899) (undo-tree-id752 . -1) (#("S" 0 1 (fontified t)) . -3900) (undo-tree-id753 . -1) (#("c" 0 1 (fontified t)) . -3901) (undo-tree-id754 . -1) (#("r" 0 1 (fontified t)) . -3902) (undo-tree-id755 . -1) (#("i" 0 1 (fontified t)) . -3903) (undo-tree-id756 . -1) (#("p" 0 1 (fontified t)) . -3904) (undo-tree-id757 . -1) (#("t" 0 1 (fontified t)) . -3905) (undo-tree-id758 . -1) 3906 (3838 . 3844) (#("S" 0 1 (fontified t)) . -3838) (undo-tree-id759 . -1) (undo-tree-id760 . -1) (#("A" 0 1 (fontified t)) . -3839) (undo-tree-id761 . -1) (undo-tree-id762 . -1) (#("S" 0 1 (fontified t)) . -3840) (undo-tree-id763 . -1) (undo-tree-id764 . -1) (#("S" 0 1 (fontified t)) . -3841) (undo-tree-id765 . -1) (undo-tree-id766 . -1) 3842 (t 26138 22194 610242 743000)) nil (26138 22348 355729 350000) 0 nil])
([nil nil ((3497 . 3507) (#("0" 0 1 (fontified t ws-butler-chg chg face (italic underline))) . -3497) (undo-tree-id723 . -1) 3498 (3494 . 3498) (#("i" 0 1 (fontified t ws-butler-chg chg face (italic underline))) . -3494) (undo-tree-id724 . -1) (#("o" 0 1 (fontified t ws-butler-chg chg face (italic underline))) . -3495) (undo-tree-id725 . -1) 3496 (3491 . 3496) (#("P" 0 1 (fontified t face (italic underline))) . -3491) (undo-tree-id726 . -1) (#("r" 0 1 (fontified t face (italic underline))) . -3492) (undo-tree-id727 . -1) (#("o" 0 1 (fontified t face (italic underline))) . -3493) (undo-tree-id728 . -1) (#("j" 0 1 (fontified t face (italic underline))) . -3494) (undo-tree-id729 . -1) (#("e" 0 1 (fontified t face (italic underline))) . -3495) (undo-tree-id730 . -1) (#("c" 0 1 (fontified t face (italic underline))) . -3496) (undo-tree-id731 . -1) (#("t" 0 1 (fontified t face (italic underline))) . -3497) (undo-tree-id732 . -1) (#(" " 0 1 (fontified t face (italic underline))) . -3498) (undo-tree-id733 . -1) (#("2" 0 1 (fontified t face (italic underline highlight-numbers-number))) . -3499) (undo-tree-id734 . -1) 3500) nil (26138 22348 355692 17000) 0 nil])
([nil nil ((#("              Ipsum accusamus ea excepturi aliquid eligendi amet. Explicabo
" 0 10 (fontified t) 10 72 (fontified t) 72 76 (fontified t)) . 3558) (undo-tree-id715 . -24) (undo-tree-id716 . -75) (undo-tree-id717 . -24) (undo-tree-id718 . 51) (undo-tree-id719 . -24) (undo-tree-id720 . -24) (undo-tree-id721 . -24) (undo-tree-id722 . -76) 3582) nil (26138 22348 355684 825000) 0 nil])
([nil nil ((#("              sapiente debitis labore sed ipsam Mollitia repellat illum quod
" 0 1 (fontified t ws-butler-chg delete) 1 53 (fontified t) 53 77 (fontified t)) . 3558) (undo-tree-id711 . -76) (undo-tree-id712 . 77) (undo-tree-id713 . -24) (undo-tree-id714 . -77) 3582) nil (26138 22348 355681 370000) 0 nil])
([nil nil ((#("              unde beatae Quis
" 0 1 (fontified t ws-butler-chg delete) 1 31 (fontified t)) . 3558) (undo-tree-id707 . -30) (undo-tree-id708 . 31) (undo-tree-id709 . -24) (undo-tree-id710 . -31) 3582) nil (26138 22348 355677 740000) 0 nil])
([nil nil ((nil rear-nonsticky nil 4368 . 4369) (nil fontified nil 4316 . 4369) (4316 . 4369) (#("h" 0 1 (fontified t face font-lock-string-face)) . -4316) (undo-tree-id633 . -1) (#("t" 0 1 (fontified t face font-lock-string-face)) . -4317) (undo-tree-id634 . -1) (#("t" 0 1 (fontified t face font-lock-string-face)) . -4318) (undo-tree-id635 . -1) (#("p" 0 1 (fontified t face font-lock-string-face)) . -4319) (undo-tree-id636 . -1) (#("s" 0 1 (fontified t face font-lock-string-face)) . -4320) (undo-tree-id637 . -1) (#(":" 0 1 (fontified t face font-lock-string-face)) . -4321) (undo-tree-id638 . -1) (#("/" 0 1 (fontified t face font-lock-string-face)) . -4322) (undo-tree-id639 . -1) (#("/" 0 1 (fontified t face font-lock-string-face)) . -4323) (undo-tree-id640 . -1) (#("e" 0 1 (fontified t face font-lock-string-face)) . -4324) (undo-tree-id641 . -1) (#("x" 0 1 (fontified t face font-lock-string-face)) . -4325) (undo-tree-id642 . -1) (#("a" 0 1 (fontified t face font-lock-string-face)) . -4326) (undo-tree-id643 . -1) (#("m" 0 1 (fontified t face font-lock-string-face)) . -4327) (undo-tree-id644 . -1) (#("p" 0 1 (fontified t face font-lock-string-face)) . -4328) (undo-tree-id645 . -1) (#("l" 0 1 (fontified t face font-lock-string-face)) . -4329) (undo-tree-id646 . -1) (#("e" 0 1 (fontified t face font-lock-string-face)) . -4330) (undo-tree-id647 . -1) (#("." 0 1 (fontified t face font-lock-string-face)) . -4331) (undo-tree-id648 . -1) (#("c" 0 1 (fontified t face font-lock-string-face)) . -4332) (undo-tree-id649 . -1) (#("o" 0 1 (fontified t face font-lock-string-face)) . -4333) (undo-tree-id650 . -1) (#("m" 0 1 (fontified t face font-lock-string-face)) . -4334) (undo-tree-id651 . -1) 4335 (nil rear-nonsticky nil 4107 . 4108) (nil fontified nil 4063 . 4108) (4063 . 4108) (#("h" 0 1 (fontified t face font-lock-string-face)) . -4063) (undo-tree-id652 . -1) (#("t" 0 1 (fontified t face font-lock-string-face)) . -4064) (undo-tree-id653 . -1) (#("t" 0 1 (fontified t face font-lock-string-face)) . -4065) (undo-tree-id654 . -1) (#("p" 0 1 (fontified t face font-lock-string-face)) . -4066) (undo-tree-id655 . -1) (#("s" 0 1 (fontified t face font-lock-string-face)) . -4067) (undo-tree-id656 . -1) (#(":" 0 1 (fontified t face font-lock-string-face)) . -4068) (undo-tree-id657 . -1) (#("/" 0 1 (fontified t face font-lock-string-face)) . -4069) (undo-tree-id658 . -1) (#("/" 0 1 (fontified t face font-lock-string-face)) . -4070) (undo-tree-id659 . -1) (#("g" 0 1 (fontified t face font-lock-string-face)) . -4071) (undo-tree-id660 . -1) (#("i" 0 1 (fontified t face font-lock-string-face)) . -4072) (undo-tree-id661 . -1) (#("t" 0 1 (fontified t face font-lock-string-face)) . -4073) (undo-tree-id662 . -1) (#("h" 0 1 (fontified t face font-lock-string-face)) . -4074) (undo-tree-id663 . -1) (#("u" 0 1 (fontified t face font-lock-string-face)) . -4075) (undo-tree-id664 . -1) (#("b" 0 1 (fontified t face font-lock-string-face)) . -4076) (undo-tree-id665 . -1) (#("." 0 1 (fontified t face font-lock-string-face)) . -4077) (undo-tree-id666 . -1) (#("c" 0 1 (fontified t face font-lock-string-face)) . -4078) (undo-tree-id667 . -1) (#("o" 0 1 (fontified t face font-lock-string-face)) . -4079) (undo-tree-id668 . -1) (#("m" 0 1 (fontified t face font-lock-string-face)) . -4080) (undo-tree-id669 . -1) 4081 (3762 . 3770) (#("w" 0 1 (fontified t ws-butler-chg chg)) . -3762) (undo-tree-id670 . -1) (undo-tree-id671 . -1) (undo-tree-id672 . -1) (#("e" 0 1 (fontified t ws-butler-chg chg)) . -3763) (undo-tree-id673 . -1) (undo-tree-id674 . -1) (undo-tree-id675 . -1) (#("i" 0 1 (fontified t ws-butler-chg chg)) . -3764) (undo-tree-id676 . -1) (undo-tree-id677 . -1) (undo-tree-id678 . -1) (#("g" 0 1 (fontified t ws-butler-chg chg)) . -3765) (undo-tree-id679 . -1) (undo-tree-id680 . -1) (undo-tree-id681 . -1) (#("h" 0 1 (fontified t ws-butler-chg chg)) . -3766) (undo-tree-id682 . -1) (undo-tree-id683 . -1) (undo-tree-id684 . -1) (#("t" 0 1 (fontified t ws-butler-chg chg)) . -3767) (undo-tree-id685 . -1) (undo-tree-id686 . -1) (undo-tree-id687 . -1) 3768 (3749 . 3768) (#("o" 0 1 (fontified t ws-butler-chg chg)) . -3749) (undo-tree-id688 . -1) (#("f" 0 1 (fontified t ws-butler-chg chg)) . -3750) (undo-tree-id689 . -1) (#(" " 0 1 (fontified t ws-butler-chg chg)) . -3751) (undo-tree-id690 . -1) 3752 (3746 . 3752) (3725 . 3746) (3717 . 3725) (#("e" 0 1 (fontified t ws-butler-chg chg)) . -3717) (undo-tree-id691 . -1) (#("h" 0 1 (fontified t ws-butler-chg chg)) . -3718) (undo-tree-id692 . -1) (#("r" 0 1 (fontified t ws-butler-chg chg)) . -3719) (undo-tree-id693 . -1) (#("s" 0 1 (fontified t ws-butler-chg chg)) . -3720) (undo-tree-id694 . -1) (#(" " 0 1 (fontified t ws-butler-chg chg)) . -3721) (undo-tree-id695 . -1) 3722 (3709 . 3722) (3688 . 3709) (3673 . 3688) (3653 . 3673) (#("v" 0 1 (fontified t ws-butler-chg chg)) . -3653) (undo-tree-id696 . -1) 3654 (3648 . 3654) (3627 . 3648) (3606 . 3627) (#("t" 0 1 (fontified t ws-butler-chg chg)) . -3606) (undo-tree-id697 . -1) (#("e" 0 1 (fontified t ws-butler-chg chg)) . -3607) (undo-tree-id698 . -1) 3608 (3596 . 3608) (3577 . 3596) (#("o" 0 1 (fontified t ws-butler-chg chg)) . -3577) (undo-tree-id699 . -1) (#("o" 0 1 (fontified t ws-butler-chg chg)) . -3578) (undo-tree-id700 . -1) (#(" " 0 1 (fontified t ws-butler-chg chg)) . -3579) (undo-tree-id701 . -1) 3580 (3577 . 3580) (#("o" 0 1 (fontified t ws-butler-chg chg)) . -3577) (undo-tree-id702 . -1) (#("p" 0 1 (fontified t ws-butler-chg chg)) . -3578) (undo-tree-id703 . -1) 3579 (3576 . 3579) (#("A" 0 1 (fontified t ws-butler-chg chg)) . -3576) (undo-tree-id704 . -1) (#("p" 0 1 (fontified t ws-butler-chg chg)) . -3577) (undo-tree-id705 . -1) (#("p" 0 1 (fontified t ws-butler-chg chg)) . -3578) (undo-tree-id706 . -1) 3579 (3572 . 3579) (3557 . 3572)) nil (26138 22348 355670 226000) 0 nil])
([nil nil ((#("<div class=\"project\">
            <h3>Project 3</h3>
            <p class=\"project__description\">
              Ipsum accusamus ea excepturi aliquid eligendi amet. Explicabo
              sapiente debitis labore sed ipsam Mollitia repellat illum quod
              unde beatae Quis
            </p>
            <ul class=\"project__stack\">
              <li class=\"project__stack-item\">SASS</li>
              <li class=\"project__stack-item\">TypeScript</li>
              <li class=\"project__stack-item\">React</li>
            </ul>

            <a
              href=\"https://github.com\"
              aria-label=\"source code\"
              class=\"link link--icon\"
            >
              <i aria-hidden=\"true\" class=\"fab fa-github\"></i>
            </a>
            <a
              href=\"https://example.com\"
              aria-label=\"live preview\"
              class=\"link link--icon\"
            >
              <i aria-hidden=\"true\" class=\"fas fa-external-link-alt\"></i>
            </a>
          <" 0 1 (fontified t) 1 4 (fontified t face font-lock-function-name-face) 4 5 (fontified t) 5 6 (fontified t face font-lock-variable-name-face) 6 10 (fontified t face font-lock-variable-name-face) 10 11 (fontified t) 11 20 (fontified t face font-lock-string-face) 20 22 (fontified t) 22 35 (fontified t) 35 37 (fontified t face font-lock-function-name-face) 37 38 (fontified t) 38 46 (fontified t face (italic underline)) 46 47 (fontified t face (italic underline highlight-numbers-number)) 47 49 (fontified t) 49 51 (fontified t face font-lock-function-name-face) 51 62 (fontified t) 62 66 (fontified t) 66 67 (fontified t face font-lock-function-name-face) 67 68 (fontified t) 68 73 (fontified t face font-lock-variable-name-face) 73 74 (fontified t) 74 96 (fontified t face font-lock-string-face) 96 98 (fontified t) 98 289 (fontified t) 289 296 (fontified t) 296 297 (face font-lock-function-name-face fontified t) 297 299 (fontified t) 299 312 (fontified t) 312 314 (fontified t face font-lock-function-name-face) 314 315 (fontified t) 315 320 (fontified t face font-lock-variable-name-face) 320 321 (fontified t) 321 329 (fontified t face font-lock-string-face) 329 337 (fontified t face font-lock-string-face) 337 339 (fontified t) 339 354 (fontified t) 354 356 (fontified t face font-lock-function-name-face) 356 357 (fontified t) 357 362 (fontified t face font-lock-variable-name-face) 362 363 (fontified t) 363 381 (fontified t face font-lock-string-face) 381 384 (fontified t face font-lock-string-face) 384 391 (fontified t) 391 393 (fontified t face font-lock-function-name-face) 393 395 (fontified t) 395 410 (fontified t) 410 412 (fontified t face font-lock-function-name-face) 412 413 (fontified t) 413 418 (fontified t face font-lock-variable-name-face) 418 419 (fontified t) 419 440 (fontified t face font-lock-string-face) 440 453 (fontified t) 453 455 (fontified t face font-lock-function-name-face) 455 457 (fontified t) 457 472 (fontified t) 472 474 (fontified t face font-lock-function-name-face) 474 475 (fontified t) 475 480 (fontified t face font-lock-variable-name-face) 480 481 (fontified t) 481 489 (fontified t face font-lock-string-face) 489 502 (fontified t face font-lock-string-face) 502 510 (fontified t) 510 512 (fontified t face font-lock-function-name-face) 512 514 (fontified t) 514 522 (fontified t) 522 528 (fontified t) 528 530 (fontified t face font-lock-function-name-face) 530 532 (fontified t) 532 546 (fontified t) 546 547 (fontified t face font-lock-function-name-face) 547 562 (fontified t) 562 566 (fontified t face font-lock-variable-name-face) 566 567 (fontified t) 567 587 (fontified t face font-lock-string-face) 587 598 (fontified t) 598 602 (fontified t) 602 612 (fontified t face font-lock-variable-name-face) 612 613 (fontified t) 613 626 (fontified t face font-lock-string-face) 626 627 (fontified t) 627 641 (fontified t) 641 646 (fontified t face font-lock-variable-name-face) 646 647 (fontified t) 647 664 (fontified t face font-lock-string-face) 664 694 (fontified t) 694 695 (fontified t face font-lock-function-name-face) 695 696 (fontified t) 696 707 (fontified t face font-lock-variable-name-face) 707 708 (fontified t) 708 714 (fontified t face font-lock-string-face) 714 715 (fontified t) 715 720 (fontified t face font-lock-variable-name-face) 720 721 (fontified t) 721 736 (fontified t face font-lock-string-face) 736 739 (fontified t) 739 740 (fontified t face font-lock-function-name-face) 740 756 (fontified t) 756 757 (fontified t face font-lock-function-name-face) 757 772 (fontified t) 772 773 (fontified t face font-lock-function-name-face) 773 788 (fontified t) 788 792 (fontified t face font-lock-variable-name-face) 792 793 (fontified t) 793 799 (fontified t face font-lock-string-face) 799 814 (face font-lock-string-face fontified t) 814 815 (fontified t) 815 829 (fontified t) 829 839 (fontified t face font-lock-variable-name-face) 839 840 (fontified t) 840 854 (fontified t face font-lock-string-face) 854 869 (fontified t) 869 874 (fontified t face font-lock-variable-name-face) 874 875 (fontified t) 875 892 (fontified t face font-lock-string-face) 892 922 (fontified t) 922 923 (fontified t face font-lock-function-name-face) 923 924 (fontified t) 924 935 (fontified t face font-lock-variable-name-face) 935 936 (fontified t) 936 942 (fontified t face font-lock-string-face) 942 943 (fontified t) 943 948 (fontified t face font-lock-variable-name-face) 948 949 (fontified t) 949 975 (fontified t face font-lock-string-face) 975 978 (fontified t) 978 979 (fontified t face font-lock-function-name-face) 979 995 (fontified t) 995 996 (fontified t face font-lock-function-name-face) 996 1009 (fontified t)) . 4582) (undo-tree-id626 . -1008) (undo-tree-id627 . -1008) (undo-tree-id628 . -1008) (undo-tree-id629 . -1008) (undo-tree-id630 . -1008) (undo-tree-id631 . 1) (undo-tree-id632 . -1009) 5590) nil (26138 22348 355637 599000) 0 nil])
([nil nil ((#("          /div>
" 0 10 (fontified t) 10 11 (fontified t ws-butler-chg delete) 11 14 (fontified t) 14 15 (fontified t syntax-table (1)) 15 16 (fontified t)) . 4572) (undo-tree-id618 . -10) (undo-tree-id619 . -15) (undo-tree-id620 . -10) (undo-tree-id621 . 6) (undo-tree-id622 . -10) (undo-tree-id623 . -10) (undo-tree-id624 . -10) (undo-tree-id625 . -16) 4582) nil (26138 22348 355633 980000) 0 nil])
([nil current ((#("
" 0 1 (fontified t)) . -4570) (undo-tree-id616 . -1) (undo-tree-id617 . -1) 4571) nil (26138 22348 355628 823000) 0 nil])
nil
